{"version":3,"sources":["components/Browser.jsx","components/Imagen.jsx","components/ListadoImagenes.jsx","App.js","serviceWorker.js","index.js"],"names":["Browser","setBusqueda","setPaginaActual","useState","usuarioPeticion","setUsuarioPeticion","className","type","placeholder","aria-label","onChange","e","target","value","onClick","trim","Imagen","imagen","largeImageURL","tags","views","likes","user","src","alt","href","rel","ListadoImagenes","imagenes","map","key","id","App","Busqueda","setImagenes","loading","setLoading","error","setError","paginaActual","totalPaginas","setTotalPaginas","useEffect","a","imgPorPagina","url","fetch","consulta","json","respuesta","hits","length","listados","document","getElementsByClassName","style","opacity","querySelector","scrollIntoView","behavior","setTimeout","calcularPaginaActual","Math","ceil","totalHits","clearTimeout","consultarAPI","role","data-dismiss","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sLAEO,SAASA,EAAT,GAAkD,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,gBAAkB,EAIPC,mBAAS,IAJF,mBAI9CC,EAJ8C,KAI7BC,EAJ6B,KAsBtD,OACE,yBAAKC,UAAU,kEACX,mDACA,yBAAKA,UAAU,4CACX,uBAAGA,UAAU,iCAAb,eAEA,2BACIA,UAAU,eACVC,KAAK,SACLC,YAAY,mCACZC,aAAW,SACXC,SAzBO,SAAAC,GACnBN,EAAmBM,EAAEC,OAAOC,UA2BpB,4BACIP,UAAU,yCACVC,KAAK,SACLO,QAzBM,WACa,KAA3BV,EAAgBW,SAClBd,EAAYG,GACZF,EAAgB,MAmBV,YCpCG,SAASc,EAAT,GAA2B,IAAVC,EAAS,EAATA,OAIrBC,EAA0CD,EAA1CC,cAAeC,EAA2BF,EAA3BE,KAAMC,EAAqBH,EAArBG,MAAOC,EAAcJ,EAAdI,MAAMC,EAAQL,EAARK,KAEzC,OACI,yBAAKhB,UAAU,6BACX,yBACIiB,IAAKL,EACLZ,UAAU,eACVkB,IAAKL,IAGT,yBAAKb,UAAU,kCACX,yBAAKA,UAAU,yBACX,uBAAGA,UAAU,4BACb,uBAAGA,UAAU,+BAGjB,yBAAKA,UAAU,aACX,wBAAIA,UAAU,sCAAqC,uBAAGA,UAAU,uBAAhE,IAA2FgB,GAE3F,yBAAKhB,UAAU,OACX,uBAAGA,UAAU,WAAWe,EAAxB,IAA+B,uBAAGf,UAAU,kBAC5C,uBAAGA,UAAU,WAAWc,EAAxB,IAA+B,uBAAGd,UAAU,iBAEhD,uBACIA,UAAU,2CACVmB,KAAMP,EACNN,OAAO,SACPc,IAAI,uBAJR,aAKkB,uBAAGpB,UAAU,wBC/BpC,SAASqB,EAAT,GAAsC,IAAZC,EAAW,EAAXA,SACrC,OACI,yBAAKtB,UAAU,gBAGVsB,EAASC,KAAI,SAAAZ,GAAM,OAChB,kBAACD,EAAD,CACIc,IAAOb,EAAOc,GACdd,OAAUA,QC0Ife,MAjJf,WAAe,MAGmB7B,mBAAS,IAH5B,mBAGN8B,EAHM,KAGIhC,EAHJ,OAImBE,mBAAS,IAJ5B,mBAINyB,EAJM,KAIIM,EAJJ,OAKiB/B,oBAAS,GAL1B,mBAKNgC,EALM,KAKGC,EALH,OAMajC,oBAAS,GANtB,mBAMNkC,EANM,KAMCC,EAND,OAO2BnC,mBAAS,GAPpC,mBAONoC,EAPM,KAOQrC,EAPR,OAQ2BC,mBAAS,GARpC,mBAQNqC,EARM,KAQQC,EARR,KAyEb,OA7DAC,qBAAU,WACQ,KAAbT,GAEe,uCAAG,sCAAAU,EAAA,6DACbC,EAAe,GACT,qCAENC,EAJa,uCAEP,qCAFO,cAIkCZ,EAJlC,qBAIuDW,EAJvD,iBAI4EL,GAJ5E,SAMIO,MAAMD,GANV,cAMbE,EANa,gBAOKA,EAASC,OAPd,WAObC,EAPa,QAWNC,OAAS,IAAgC,IAA1BD,EAAUC,KAAKC,OAXxB,wBAYjBb,GAAS,GAZQ,kCAgBnBF,GAAW,GAIXF,EAAYe,EAAUC,OAIhBE,EAAWC,SAASC,uBAAuB,oBACxC,GAAGC,MAAMC,QAAU,EAIhBH,SAASI,cAAc,QAC/BC,eAAe,CAACC,SAAW,WAGzBxB,EAAUyB,YAAW,WACzBR,EAAS,GAAGG,MAAMC,QAAU,EAC5BpB,GAAW,GACXE,GAAS,GAGT,IAAIuB,EAAuBC,KAAKC,KAAKd,EAAUe,UAAYpB,GAC3DH,EAAgBoB,KACf,MAzCgB,mBA0CZ,kBAAMI,aAAa9B,MA1CP,4CAAH,oDA4ClB+B,KACC,CAACjC,EAAUM,IAcZ,yBAAKjC,UAAU,OACb,kBAACN,EAAD,CACEC,YAAeA,EACfC,gBAAmBA,KAKP,IAAZiC,EAEA,yBAAK7B,UAAU,YAEf,MAKU,IAAV+B,EAEA,yBAAK/B,UAAU,oEAAoE6D,KAAK,SACtF,wCADF,uEAEE,4BAAQ5D,KAAK,SAASD,UAAU,QAAQ8D,eAAa,QAAQ3D,aAAW,SACtE,0BAAM4D,cAAY,QAAlB,UAIJ,KAGF,yBAAK/D,UAAU,uCACb,kBAACqB,EAAD,CACIC,SAAYA,KAMG,IAApBA,EAASuB,OACR,yBAAK7C,UAAU,gDACO,IAAjBiC,EAAsB,KACvB,4BACEhC,KAAK,SACLwB,GAAG,OACHzB,UAAU,0BACVQ,QAtDS,WACC,IAAjByB,GACHrC,EAAgBqC,EAAe,KAsDrB,uBAAGjC,UAAU,uBAGjB,2BAAIiC,GACDA,IAAiBC,EAAe,KACjC,4BACEjC,KAAK,SACLwB,GAAG,OACHzB,UAAU,0BACVQ,QA7DK,WACZyB,IAAiBC,GACpBtC,EAAgBqC,EAAe,KA6DrB,uBAAGjC,UAAU,yBAInB,KAGF,yBAAKA,UAAU,0CACb,wBAAIA,UAAU,0BAAd,+CCnIYgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLiD,QAAQjD,MAAMA,EAAMkD,a","file":"static/js/main.0fb1c237.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport function Browser({setBusqueda, setPaginaActual}) {\r\n\r\n  // declarar el estado\r\n  // set State\r\n  const [ usuarioPeticion, setUsuarioPeticion] = useState('');\r\n\r\n  // leer datos del formulario\r\n  // read form's data\r\n  const handleChange = e => {\r\n    setUsuarioPeticion(e.target.value);\r\n  }\r\n\r\n  // pasar los datos al componente padre\r\n  // pass data to father component\r\n  const handleClick = () => {\r\n    if (usuarioPeticion.trim() !== '') {\r\n      setBusqueda(usuarioPeticion);\r\n      setPaginaActual(1);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container-fluid bg-white text-center p-4 rounded-bottom shadow\">\r\n        <h1>Get Images for Free</h1>\r\n        <nav className=\"navbar navbar-light bg-light p-4 mx-auto\">\r\n            <p className=\"navbar-brand font-weight-bold\">PixyBay-API</p>\r\n            \r\n            <input \r\n                className=\"form-control\"\r\n                type=\"search\"\r\n                placeholder=\"Write what you are loking for...\"\r\n                aria-label=\"Search\"\r\n                onChange = {handleChange}\r\n            />\r\n\r\n            <button \r\n                className=\"btn btn-outline-warning btn-block mt-3\" \r\n                type=\"submit\"\r\n                onClick={handleClick}\r\n              >Search</button>\r\n        </nav>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\n\r\nexport default function Imagen({imagen}) {\r\n\r\n    // tomar los datos de la API, pasados por props.\r\n    // take api's data, passed throw props.\r\n    const {largeImageURL, tags, views, likes,user} = imagen;\r\n\r\n    return (\r\n        <div className=\"card my-4 card-img shadow\">\r\n            <img \r\n                src={largeImageURL}\r\n                className=\"card-img-top\"\r\n                alt={tags} \r\n            />\r\n\r\n            <div className=\"card-body w-100 pt-0 card-info\">\r\n                <div className=\"toggleBtn text-center\">\r\n                    <i className=\"d-block fas fa-angle-up\"></i>\r\n                    <i className=\"d-block fas fa-angle-down\"></i>\r\n                </div>\r\n\r\n                <div className=\"card-text\">\r\n                    <h5 className=\"card-title text-capitalize m-0 p-0\"><i className=\"far fa-user-circle\"></i> {user}</h5>\r\n\r\n                    <div className=\"row\">\r\n                        <p className=\"col m-0\">{likes} <i className=\"far fa-heart\"></i></p>\r\n                        <p className=\"col m-0\">{views} <i className=\"far fa-eye\"></i></p>\r\n                    </div>\r\n                    <a \r\n                        className=\"btn btn-outline-warning btn-sm btn-block\" \r\n                        href={largeImageURL} \r\n                        target=\"_blank\" \r\n                        rel=\"noopener noreferrer\">\r\n                            Descargar <i className=\"fas fa-download\"></i>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport Imagen from './Imagen';\r\n\r\nexport default function ListadoImagenes({imagenes}) {\r\n    return (\r\n        <div className=\"card-columns\">\r\n            {/* Crear un componente por cada imagen*/}\r\n            {/* Make a component for each image*/}\r\n            {imagenes.map(imagen => (\r\n                <Imagen\r\n                    key = {imagen.id}\r\n                    imagen = {imagen}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport { Browser } from \"./components/Browser\";\nimport ListadoImagenes from './components/ListadoImagenes';\n\nfunction App() {\n\n  // States\n  const [Busqueda, setBusqueda] = useState('');\n  const [imagenes, setImagenes] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [paginaActual, setPaginaActual] = useState(1);\n  const [totalPaginas, setTotalPaginas] = useState(1);\n\n  // detectar cambios en los states (Busqueda y PaginaActual).\n  // detect changes in the states (Busqueda y PaginaActual).\n  useEffect(() => {\n    if(Busqueda === '') return;\n\n    const consultarAPI = async () => {\n      const imgPorPagina = 15;\n      const key = \"16046955-7e7bedc44b56eb945e2a4db3d\";\n\n      const url = `https://pixabay.com/api/?key=${key}&q=${Busqueda}&per_page=${imgPorPagina}&page=${paginaActual}`;\n\n      const consulta = await fetch(url);\n      const respuesta = await consulta.json();\n\n      // Si hay error, mostrar error\n      // if there is an error, show error\n      if(respuesta.hits === [] || respuesta.hits.length === 0){\n        setError(true)\n        return;\n      }\n\n      setLoading(true);\n\n      // guardar datos en el state.\n      // save data in the state.\n      setImagenes(respuesta.hits);\n      \n      // cargar elemento, pero ocultarlo unos segundos.\n      // load element, but hide it for seconds.\n      const listados = document.getElementsByClassName(\"listadoImagenes\");\n      listados[0].style.opacity = 0;\n\n      // mover pantalla hasta arriba\n      // move the screen to the top\n      const app = document.querySelector(\".App\");\n      app.scrollIntoView({behavior : 'smooth'});      \n      // cargar Spinner de \"cargando\"\n      // Load spinner of \"Loading\"\n      const loading = setTimeout(() => {\n        listados[0].style.opacity = 1;\n        setLoading(false);\n        setError(false);\n        // calcular total de paginas\n        // calculate total pages\n        let calcularPaginaActual = Math.ceil(respuesta.totalHits / imgPorPagina);\n        setTotalPaginas(calcularPaginaActual);\n      }, 2500);\n      return () => clearTimeout(loading);\n    }\n    consultarAPI();\n  }, [Busqueda, paginaActual]); /*UseEffect*/\n\n  // Pagina siguiente y/o anterior\n  // next and/or previous page\n  const previousPage = () => {\n    if(paginaActual === 1) return;\n    setPaginaActual(paginaActual - 1);\n  }\n  const nextPage = () => {\n    if(paginaActual === totalPaginas) return;\n    setPaginaActual(paginaActual + 1);\n  }\n\n  return (\n    <div className=\"App\">\n      <Browser \n        setBusqueda = {setBusqueda}\n        setPaginaActual = {setPaginaActual}\n      />\n\n      {/* Si el estado esta cargando, mostrar spinner */}\n      {/* If the state is loading, show spinner */}\n      { loading === true \n      ? \n        <div className=\"spinner\"></div> \n      : \n        null  \n      }\n      \n      {/* Si hay un error, mostrar mensaje */}\n      {/* If there is an error, show message */}\n      { error === true\n      ?\n        <div className=\"w-75 mx-auto alert alert-warning alert-dismissible fade show mt-5\" role=\"alert\">\n          <strong>Ups!</strong> We could not find what you are looking for... Try in another way :>\n          <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n      :\n        null\n      }\n\n      <div className=\"listadoImagenes container my-5 p-5 \">\n        <ListadoImagenes\n            imagenes = {imagenes}\n            />\n      </div>\n\n      {/* si hay imagenes, mostrar paginador*/}\n      {/* If there are images, show paginador*/}\n      {imagenes.length !== 0 ?\n        <div className=\"container paginador text-center mx-auto mb-5\">\n          { (paginaActual === 1) ? null : (\n            <button \n              type=\"button\"\n              id=\"back\"\n              className=\"btn btn-outline-warning\"\n              onClick={previousPage}\n              >\n              <i className=\"fas fa-angle-left\"></i>\n            </button>\n          )}\n          <p>{paginaActual}</p>\n          { (paginaActual === totalPaginas)? null :(\n            <button\n              type=\"button\"\n              id=\"next\"\n              className=\"btn btn-outline-warning\"\n              onClick={nextPage}\n              >\n              <i className=\"fas fa-angle-right\"></i>\n            </button>\n          )}\n        </div>\n      : null\n      }\n\n      <div className=\"footer shadow-lg bg-light fixed-bottom\">\n        <h6 className=\"text-center text-muted\">Web made by Adriel Minyety Gonzalez ©</h6>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}